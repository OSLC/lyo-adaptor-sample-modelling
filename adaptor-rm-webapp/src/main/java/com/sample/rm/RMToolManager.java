// Start of user code Copyright
/*******************************************************************************
 * Copyright (c) 2011, 2012 IBM Corporation and others.
 *
 *  All rights reserved. This program and the accompanying materials
 *  are made available under the terms of the Eclipse Public License v1.0
 *  and Eclipse Distribution License v. 1.0 which accompanies this distribution.
 *  
 *  The Eclipse Public License is available at http://www.eclipse.org/legal/epl-v10.html
 *  and the Eclipse Distribution License is available at
 *  http://www.eclipse.org/org/documents/edl-v10.php.
 *  
 *  Contributors:
 *  
 *	   Sam Padgett	       - initial API and implementation
 *     Michael Fiedler     - adapted for OSLC4J
 *     Jad El-khoury        - initial implementation of code generator (https://bugs.eclipse.org/bugs/show_bug.cgi?id=422448)
 *     Matthieu Helleboid   - Support for multiple Service Providers.
 *     Anass Radouani       - Support for multiple Service Providers.
 *
 * This file is generated by org.eclipse.lyo.oslc4j.codegenerator
 *******************************************************************************/
// End of user code

package com.sample.rm;

// Start of user code Notice
//Note: The Lyo code generator is migrating the name of this class from 'RMToolManager' to the new shorter name 'RestDelegate'.
//You are still using the old name. The generator will continue to use this old name until you actively trigger the change.
//To migrate to the new class name:
//1. Rename your class to RestDelegate 
//    * Please rename and do not simply create a copy of the file. The generator needs to detect the file deletion in order to activate the name change.
//2. Regenerate the code. 
//    * The generator will generate this class with the new name.
//    * Besides the class name, the code - including the user clode blocks - remain intact.
//    * All other class references to the new class name are updated.
//3. Delete this notice
// End of user code

import javax.inject.Inject;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.ServletContextEvent;
import java.util.List;
import java.util.ArrayList;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.eclipse.lyo.oslc4j.core.model.ServiceProvider;
import org.eclipse.lyo.oslc4j.core.OSLC4JUtils;
import org.eclipse.lyo.oslc4j.core.model.AbstractResource;
import com.sample.rm.servlet.ServiceProviderCatalogSingleton;
import com.sample.rm.ServiceProviderInfo;
import com.sample.rm.resources.Requirement;
import java.util.NoSuchElementException;
import org.eclipse.lyo.store.ModelUnmarshallingException;
import org.eclipse.lyo.store.Store;
import org.eclipse.lyo.store.StorePool;
import org.eclipse.lyo.store.StoreAccessException;
import javax.ws.rs.WebApplicationException;
import javax.ws.rs.core.Response.Status;

import org.eclipse.lyo.oslc4j.trs.server.TrsEventHandler;


// Start of user code imports
import java.util.concurrent.ThreadLocalRandom;
import java.net.URI;
import java.net.URISyntaxException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Iterator;
// End of user code

// Start of user code pre_class_code
// End of user code

public class RMToolManager {

    private static final Logger log = LoggerFactory.getLogger(RMToolManager.class);

    @Inject StorePool storePool;
    @Inject TrsEventHandler trsEventHandler;
    @Inject RMToolResourcesFactory resourcesFactory;
    // Start of user code class_attributes
    private static int nextRequirementId = -1;
    // End of user code
    
    public RMToolManager() {
        log.trace("Delegate is initialized");
    }
    
    
    // Start of user code class_methods
    private Requirement produceRandomRequirement(String id) {
        Requirement r = null;
        r = resourcesFactory.createRequirement(id);
        r.setIdentifier(id);
        r.setTitle("aTitle with id:" + id);
        r.setDescription("A sample Requirement with id:" + id);
        return r;
    }

    private void initializeRequirements(int size) {
        for (int i = 0; i < size; i++) {
            nextRequirementId++;
            String id = Integer.toString(nextRequirementId);
            Requirement r = produceRandomRequirement(id);
            createRequirement(null, r);
            trsEventHandler.onCreated(r);
        }
    }

    // End of user code

    //The methods contextInitializeServletListener() and contextDestroyServletListener() no longer exits
    //Migrate any user-specific code blocks to the class com.sample.rm.servlet.ServletListener
    //Any user-specific code should be found in *.lost files.

    public static ServiceProviderInfo[] getServiceProviderInfos(HttpServletRequest httpServletRequest)
    {
        ServiceProviderInfo[] serviceProviderInfos = {};
        
        // Start of user code "ServiceProviderInfo[] getServiceProviderInfos(...)"
        ServiceProviderInfo r1 = new ServiceProviderInfo();
        r1.name = "A sample RM Service Provider 1";
        r1.serviceProviderId = "1";

        ServiceProviderInfo r2 = new ServiceProviderInfo();
        r2.name = "A sample RM Service Provider 2";
        r2.serviceProviderId = "2";

        serviceProviderInfos = new ServiceProviderInfo[2];
        serviceProviderInfos[0] = r1;
        serviceProviderInfos[1] = r2;
        // End of user code
        return serviceProviderInfos;
    }

    public List<Requirement> queryRequirements(HttpServletRequest httpServletRequest, String where, String prefix, boolean paging, int page, int limit)
    {
        List<Requirement> resources = null;
        
        // Start of user code queryRequirements_storeInit
        if (nextRequirementId == -1) {
            initializeRequirements(37);
        }
        // End of user code
        Store store = storePool.getStore();
        try {
            resources = new ArrayList<Requirement>(store.getResources(storePool.getDefaultNamedGraphUri(), Requirement.class, prefix, where, "", (OSLC4JUtils.hasLyoStorePagingPreciseLimit() ? limit : limit+1), page*limit));
        } catch (StoreAccessException | ModelUnmarshallingException e) {
            log.error("Failed to query resources, with where-string '" + where + "'", e);
            throw new WebApplicationException("Failed to query resources, with where-string '" + where + "'", e, Status.INTERNAL_SERVER_ERROR);
        } finally {
            storePool.releaseStore(store);
        }
        // Start of user code queryRequirements_storeFinalize
        // End of user code
        
        // Start of user code queryRequirements
        // End of user code
        return resources;
    }
    public List<Requirement> RequirementSelector(HttpServletRequest httpServletRequest, String terms)
    {
        List<Requirement> resources = null;
        
        // Start of user code RequirementSelector_storeInit
        // End of user code
        Store store = storePool.getStore();
        try {
            resources = new ArrayList<Requirement>(store.getResources(storePool.getDefaultNamedGraphUri(), Requirement.class, "", "", terms, 20, -1));
        } catch (StoreAccessException | ModelUnmarshallingException e) {
            log.error("Failed to search resources, with search-term '" + terms + "'", e);
            throw new WebApplicationException("Failed to search resources, with search-term '" + terms + "'", e, Status.INTERNAL_SERVER_ERROR);
        } finally {
            storePool.releaseStore(store);
        }
        // Start of user code RequirementSelector_storeFinalize
        // End of user code
        
        // Start of user code RequirementSelector
        // End of user code
        return resources;
    }
    public Requirement createRequirement(HttpServletRequest httpServletRequest, final Requirement aResource)
    {
        Requirement newResource = null;
        
        // Start of user code createRequirement_storeInit
        // End of user code
        Store store = storePool.getStore();
        try {
            URI uri = null;
            // Start of user code createRequirement_storeSetUri
            uri = aResource.getAbout();
            if (null == uri) {
                throw new UnsupportedOperationException("Set the uri of the resource to be created, before it can be added to the store. You can then remove this UnsupportedOperationException");
            }
            // End of user code
            if (store.resourceExists(storePool.getDefaultNamedGraphUri(), uri)) {
                log.error("Cannot create a resource that already exists: '" + uri + "'");
                throw new WebApplicationException("Cannot create a resource that already exists: '" + uri + "'", Status.SEE_OTHER);
            }
            aResource.setAbout(uri);
            try {
                store.appendResource(storePool.getDefaultNamedGraphUri(), aResource);
            } catch (StoreAccessException e) {
                log.error("Failed to create resource: '" + aResource.getAbout() + "'", e);            
                throw new WebApplicationException("Failed to create resource: '" + aResource.getAbout() + "'", e, Status.INTERNAL_SERVER_ERROR);
            }
        } finally {
            storePool.releaseStore(store);
        }
        newResource = aResource;
        // Start of user code createRequirement_storeFinalize
        // End of user code
        
        // Start of user code createRequirement
        // End of user code
        return newResource;
    }

    public Requirement createRequirementFromDialog(HttpServletRequest httpServletRequest, final Requirement aResource)
    {
        Requirement newResource = null;
        
        // Start of user code createRequirementFromDialog_storeInit
        // End of user code
        Store store = storePool.getStore();
        try {
            URI uri = null;
            // Start of user code createRequirementFromDialog_storeSetUri
            //TODO: Set the uri of the resource to be created. Replace this code within the protected user code.
            if (null == uri) {
                throw new UnsupportedOperationException("Set the uri of the resource to be created, before it can be added to the store. You can then remove this UnsupportedOperationException");
            }
            // End of user code
            if (store.resourceExists(storePool.getDefaultNamedGraphUri(), uri)) {
                log.error("Cannot create a resource that already exists: '" + uri + "'");
                throw new WebApplicationException("Cannot create a resource that already exists: '" + uri + "'", Status.SEE_OTHER);
            }
            aResource.setAbout(uri);
            try {
                store.appendResource(storePool.getDefaultNamedGraphUri(), aResource);
            } catch (StoreAccessException e) {
                log.error("Failed to create resource: '" + aResource.getAbout() + "'", e);            
                throw new WebApplicationException("Failed to create resource: '" + aResource.getAbout() + "'", e, Status.INTERNAL_SERVER_ERROR);
            }
        } finally {
            storePool.releaseStore(store);
        }
        newResource = aResource;
        // Start of user code createRequirementFromDialog_storeFinalize
        // End of user code
        
        // Start of user code createRequirementFromDialog
        // End of user code
        return newResource;
    }



    public Requirement getRequirement(HttpServletRequest httpServletRequest, final String requirementId)
    {
        Requirement aResource = null;
        
        // Start of user code getRequirement_storeInit
        // End of user code
        URI uri = resourcesFactory.constructURIForRequirement(requirementId);
        // Start of user code getRequirement_storeSetUri
        // End of user code
        Store store = storePool.getStore();
        try {
            aResource = store.getResource(storePool.getDefaultNamedGraphUri(), uri, Requirement.class);
        } catch (NoSuchElementException e) {
            log.error("Resource: '" + uri + "' not found");
            throw new WebApplicationException("Failed to get resource: '" + uri + "'", e, Status.NOT_FOUND);
        } catch (StoreAccessException | ModelUnmarshallingException  e) {
            log.error("Failed to get resource: '" + uri + "'", e);
            throw new WebApplicationException("Failed to get resource: '" + uri + "'", e, Status.INTERNAL_SERVER_ERROR);
        } finally {
            storePool.releaseStore(store);
        }
        // Start of user code getRequirement_storeFinalize
        // End of user code
        
        // Start of user code getRequirement
        // End of user code
        return aResource;
    }

    public Boolean deleteRequirement(HttpServletRequest httpServletRequest, final String requirementId)
    {
        Boolean deleted = false;
        // Start of user code deleteRequirement_storeInit
        // End of user code
        URI uri = resourcesFactory.constructURIForRequirement(requirementId);
        // Start of user code deleteRequirement_storeSetUri
        // End of user code
        Store store = storePool.getStore();
        if (!store.resourceExists(storePool.getDefaultNamedGraphUri(), uri)) {
            log.error("Cannot delete a resource that does not already exists: '" + uri + "'");
            throw new WebApplicationException("Cannot delete a resource that does not already exists: '" + uri + "'", Status.NOT_FOUND);
        }
        store.deleteResources(storePool.getDefaultNamedGraphUri(), uri);
        storePool.releaseStore(store);
        deleted = true;
        // Start of user code deleteRequirement_storeFinalize
        // End of user code
        
        // Start of user code deleteRequirement
        // TODO Implement code to delete a resource
        // If you encounter problems, consider throwing the runtime exception WebApplicationException(message, cause, final httpStatus)
        // End of user code
        return deleted;
    }

    public Requirement updateRequirement(HttpServletRequest httpServletRequest, final Requirement aResource, final String requirementId) {
        Requirement updatedResource = null;
        // Start of user code updateRequirement_storeInit
        // End of user code
        URI uri = resourcesFactory.constructURIForRequirement(requirementId);
        // Start of user code updateRequirement_storeSetUri
        // End of user code
        Store store = storePool.getStore();
        if (!store.resourceExists(storePool.getDefaultNamedGraphUri(), uri)) {
            log.error("Cannot update a resource that does not already exists: '" + uri + "'");
            throw new WebApplicationException("Cannot update a resource that does not already exists: '" + uri + "'", Status.NOT_FOUND);
        }
        aResource.setAbout(uri);
        try {
            store.updateResources(storePool.getDefaultNamedGraphUri(), aResource);
        } catch (StoreAccessException e) {
            log.error("Failed to update resource: '" + uri + "'", e);
            throw new WebApplicationException("Failed to update resource: '" + uri + "'", e);
        } finally {
            storePool.releaseStore(store);
        }
        updatedResource = aResource;
        // Start of user code updateRequirement_storeFinalize
        // End of user code
        
        // Start of user code updateRequirement
        // End of user code
        return updatedResource;
    }

    public String getETagFromRequirement(final Requirement aResource)
    {
        String eTag = null;
        // Start of user code getETagFromRequirement
        // TODO Implement code to return an ETag for a particular resource
        // End of user code
        return eTag;
    }

}
