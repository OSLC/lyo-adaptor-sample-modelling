// Start of user code Copyright
/*******************************************************************************
 * Copyright (c) 2011, 2012 IBM Corporation and others.
 *
 *  All rights reserved. This program and the accompanying materials
 *  are made available under the terms of the Eclipse Public License v1.0
 *  and Eclipse Distribution License v. 1.0 which accompanies this distribution.
 *  
 *  The Eclipse Public License is available at http://www.eclipse.org/legal/epl-v10.html
 *  and the Eclipse Distribution License is available at
 *  http://www.eclipse.org/org/documents/edl-v10.php.
 *  
 *  Contributors:
 *  
 *	   Sam Padgett	       - initial API and implementation
 *     Michael Fiedler     - adapted for OSLC4J
 *     Jad El-khoury        - initial implementation of code generator (https://bugs.eclipse.org/bugs/show_bug.cgi?id=422448)
 *     Matthieu Helleboid   - Support for multiple Service Providers.
 *     Anass Radouani       - Support for multiple Service Providers.
 *
 * This file is generated by org.eclipse.lyo.oslc4j.codegenerator
 *******************************************************************************/
// End of user code

package com.sample.rm;

import javax.servlet.http.HttpServletRequest;
import javax.inject.Inject;
import javax.servlet.ServletContextEvent;
import java.util.List;
import java.util.ArrayList;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.eclipse.lyo.oslc4j.core.model.ServiceProvider;
import org.eclipse.lyo.oslc4j.core.OSLC4JUtils;
import org.eclipse.lyo.oslc4j.core.model.AbstractResource;
import com.sample.rm.servlet.ServiceProviderCatalogSingleton;
import com.sample.rm.ServiceProviderInfo;
import com.sample.rm.resources.Requirement;
import java.net.URI;
import java.util.Properties;
import java.io.FileInputStream;
import java.io.IOException;
import java.net.URISyntaxException;
import java.util.NoSuchElementException;
import org.eclipse.lyo.store.ModelUnmarshallingException;
import org.eclipse.lyo.store.Store;
import org.eclipse.lyo.store.StorePool;
import org.eclipse.lyo.store.StoreAccessException;
import javax.ws.rs.WebApplicationException;
import javax.ws.rs.core.Response.Status;


import org.eclipse.lyo.oslc4j.trs.server.InmemPagedTrs;
import org.eclipse.lyo.oslc4j.trs.server.PagedTrs;
import org.eclipse.lyo.oslc4j.trs.server.PagedTrsFactory;
import org.eclipse.lyo.oslc4j.trs.server.TrsEventHandler;


// Start of user code imports
import java.util.concurrent.ThreadLocalRandom;
import java.net.URI;
import java.net.URISyntaxException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Iterator;
// End of user code

// Start of user code pre_class_code
// End of user code

public class RMToolManager {

    private static final Logger log = LoggerFactory.getLogger(RMToolManager.class);

    //TODO: Can we inject into a static???
    @Inject TrsEventHandler trsEventHandler;
    //TODO: HOW TO GET THAT?????
    //    @Inject PagedTrs pagedTrs;
    @Inject StorePool storePool;
    
    // Start of user code class_attributes
    private static Map<String, Requirement> requirements = new HashMap<String, Requirement>(1000);
    private static int nextRequirementId = -1;
    // End of user code
    
    
    public RMToolManager() {
        log.trace("Delegate is initialized");
    }
    
    // Start of user code class_methods
	private static int randomNumber(int origin, int bound) {
		return ThreadLocalRandom.current().nextInt(origin, bound);
	}

    public static ArrayList<Requirement> getRequirements() {
        return new ArrayList<Requirement>(requirements.values());
    }

    private static Requirement produceRandomRequirement(String id) {
        Requirement r = null;
        r = RMToolResourcesFactory.createRequirement(id);
        r.setIdentifier(id);
        r.setTitle("aTitle with id:" + id);
        r.setDescription("A sample Requirement with id:" + id);
        return r;
    }

    private static void initializeRequirements(int size) {
        for (int i = 0; i < size; i++) {
            nextRequirementId++;
            String id = Integer.toString(nextRequirementId);
            Requirement r = produceRandomRequirement(id);
            requirements.put(id, r);
        }
    }

    public Requirement createOrUpdateRequirement(HttpServletRequest httpServletRequest, final Requirement aResource) {
        if (!requirements.containsKey(aResource.getIdentifier())) {
            nextRequirementId++;
            String id = Integer.toString(nextRequirementId);
            URI uri = RMToolResourcesFactory.constructURIForRequirement(id);
            aResource.setAbout(uri);
            requirements.put(id, aResource);
            trsEventHandler.onCreated(aResource);
        }
        else {
            URI uri = RMToolResourcesFactory.constructURIForRequirement(aResource.getIdentifier());
            aResource.setAbout(uri);
            requirements.put(aResource.getIdentifier(), aResource);
            trsEventHandler.onModified(aResource);
        }
        return aResource;
    }
    // End of user code

    private static void contextInitializeServletListener(final ServletContextEvent servletContextEvent) {
    //This method is no longer in use. Migrate any user code blocks to the class ServletListener
    }

    private static void contextDestroyServletListener(ServletContextEvent servletContextEvent)  {
    //This method is no longer in use. Migrate any user code blocks to the class ServletListener
    }

    public static ServiceProviderInfo[] getServiceProviderInfos(HttpServletRequest httpServletRequest)
    {
        ServiceProviderInfo[] serviceProviderInfos = {};
        
        // Start of user code "ServiceProviderInfo[] getServiceProviderInfos(...)"
        ServiceProviderInfo r1 = new ServiceProviderInfo();
        r1.name = "A sample RM Service Provider 1";
        r1.serviceProviderId = "1";

        ServiceProviderInfo r2 = new ServiceProviderInfo();
        r2.name = "A sample RM Service Provider 2";
        r2.serviceProviderId = "2";

        serviceProviderInfos = new ServiceProviderInfo[2];
        serviceProviderInfos[0] = r1;
        serviceProviderInfos[1] = r2;
        // End of user code
        return serviceProviderInfos;
    }

    public static List<Requirement> queryRequirements(HttpServletRequest httpServletRequest, String where, String prefix, boolean paging, int page, int limit)
    {
        List<Requirement> resources = null;
        
        
        // Start of user code queryRequirements
        if (nextRequirementId == -1) {
            initializeRequirements(25);
        }
        resources = new ArrayList<>(requirements.values());
        // End of user code
        return resources;
    }
    public static List<Requirement> RequirementSelector(HttpServletRequest httpServletRequest, String terms)   
    {
        List<Requirement> resources = null;
        
        
        // Start of user code RequirementSelector
        resources = new ArrayList<>(requirements.values());
        // End of user code
        return resources;
    }
    public Requirement createRequirement(HttpServletRequest httpServletRequest, final Requirement aResource)
    {
        Requirement newResource = null;
        
        
        // Start of user code createRequirement
        newResource = createOrUpdateRequirement(httpServletRequest, aResource);
        // End of user code
        return newResource;
    }

    public Requirement createRequirementFromDialog(HttpServletRequest httpServletRequest, final Requirement aResource)
    {
        Requirement newResource = null;
        
        
        // Start of user code createRequirementFromDialog
        newResource = createOrUpdateRequirement(httpServletRequest, aResource);
        // End of user code
        return newResource;
    }



    public Requirement getRequirement(HttpServletRequest httpServletRequest, final String requirementId)
    {
        Requirement aResource = null;
        
        // Start of user code getRequirement_storeInit
        // End of user code
        Store store = storePool.getStore();
        URI uri = RMToolResourcesFactory.constructURIForRequirement(requirementId);
        try {
            aResource = store.getResource(storePool.getDefaultNamedGraphUri(), uri, Requirement.class);
        } catch (NoSuchElementException e) {
            log.error("Resource: '" + uri + "' not found");
            throw new WebApplicationException("Failed to get resource: '" + uri + "'", e, Status.NOT_FOUND);
        } catch (StoreAccessException | ModelUnmarshallingException  e) {
            log.error("Failed to get resource: '" + uri + "'", e);
            throw new WebApplicationException("Failed to get resource: '" + uri + "'", e, Status.INTERNAL_SERVER_ERROR);
        } finally {
            storePool.releaseStore(store);
        }
        // Start of user code getRequirement_storeFinalize
        // End of user code
        
        // Start of user code getRequirement
        aResource = requirements.get(requirementId);
        // End of user code
        return aResource;
    }

    public static Boolean deleteRequirement(HttpServletRequest httpServletRequest, final String requirementId)
    {
        Boolean deleted = false;
        
        // Start of user code deleteRequirement
        // TODO Implement code to delete a resource
        // If you encounter problems, consider throwing the runtime exception WebApplicationException(message, cause, final httpStatus)
        // End of user code
        return deleted;
    }

    public Requirement updateRequirement(HttpServletRequest httpServletRequest, final Requirement aResource, final String requirementId) {
        Requirement updatedResource = null;
        
        // Start of user code updateRequirement
        updatedResource = createOrUpdateRequirement(httpServletRequest, aResource);
        // End of user code
        return updatedResource;
    }

    public static String getETagFromRequirement(final Requirement aResource)
    {
        String eTag = null;
        // Start of user code getETagFromRequirement
        // TODO Implement code to return an ETag for a particular resource
        // End of user code
        return eTag;
    }

}
