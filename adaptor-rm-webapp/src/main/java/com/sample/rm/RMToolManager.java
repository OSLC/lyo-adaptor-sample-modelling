// Start of user code Copyright
/*******************************************************************************
 * Copyright (c) 2011, 2012 IBM Corporation and others.
 *
 *  All rights reserved. This program and the accompanying materials
 *  are made available under the terms of the Eclipse Public License v1.0
 *  and Eclipse Distribution License v. 1.0 which accompanies this distribution.
 *  
 *  The Eclipse Public License is available at http://www.eclipse.org/legal/epl-v10.html
 *  and the Eclipse Distribution License is available at
 *  http://www.eclipse.org/org/documents/edl-v10.php.
 *  
 *  Contributors:
 *  
 *	   Sam Padgett	       - initial API and implementation
 *     Michael Fiedler     - adapted for OSLC4J
 *     Jad El-khoury        - initial implementation of code generator (https://bugs.eclipse.org/bugs/show_bug.cgi?id=422448)
 *     Matthieu Helleboid   - Support for multiple Service Providers.
 *     Anass Radouani       - Support for multiple Service Providers.
 *
 * This file is generated by org.eclipse.lyo.oslc4j.codegenerator
 *******************************************************************************/
// End of user code

package com.sample.rm;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.ServletContextEvent;
import java.util.List;
import java.util.ArrayList;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.eclipse.lyo.oslc4j.core.model.ServiceProvider;
import org.eclipse.lyo.oslc4j.core.model.AbstractResource;
import com.sample.rm.servlet.ServiceProviderCatalogSingleton;
import com.sample.rm.ServiceProviderInfo;
import com.sample.rm.resources.Requirement;
import java.net.URI;
import java.util.Properties;
import java.io.FileInputStream;
import java.io.IOException;
import java.net.URISyntaxException;
import java.util.NoSuchElementException;
import org.eclipse.lyo.store.ModelUnmarshallingException;
import org.eclipse.lyo.store.Store;
import org.eclipse.lyo.store.StorePool;
import org.eclipse.lyo.store.StoreAccessException;
import javax.ws.rs.WebApplicationException;
import javax.ws.rs.core.Response.Status;


import org.eclipse.lyo.oslc4j.trs.server.InmemPagedTrs;
import org.eclipse.lyo.oslc4j.trs.server.PagedTrs;
import org.eclipse.lyo.oslc4j.trs.server.PagedTrsFactory;
import org.eclipse.lyo.oslc4j.trs.server.TrsEventHandler;


// Start of user code imports
import java.util.concurrent.ThreadLocalRandom;
import java.net.URI;
import java.net.URISyntaxException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Iterator;
// End of user code

// Start of user code pre_class_code
// End of user code

public class RMToolManager {

    private static final Logger log = LoggerFactory.getLogger(RMToolManager.class);

    private static StorePool storePool;
    
    private static PagedTrs pagedTrs;
    private static TrsEventHandler trsEventHandler;
    // Start of user code class_attributes
    private static Map<String, Requirement> requirements = new HashMap<String, Requirement>(1000);
    private static int nextRequirementId;
    // End of user code
    
    public static PagedTrs getPagedTrs() {
        return pagedTrs;
    }

    public static TrsEventHandler getTrsEventHandler() {
        return trsEventHandler;
    }

    // Start of user code trsMethods
    // TODO Use one of these methods to update the PagedTrs service, when appropriate.
    // trsEventHandler.[onCreated|onModified|onDeleted]();
    // End of user code
    
    // Start of user code class_methods
	private static int randomNumber(int origin, int bound) {
		return ThreadLocalRandom.current().nextInt(origin, bound);
	}

    public static ArrayList<Requirement> getRequirements() {
        return new ArrayList<Requirement>(requirements.values());
    }

    private static Requirement produceRandomRequirement(String id) {
        Requirement r = null;
        r = RMToolResourcesFactory.createRequirement(id);
        r.setIdentifier(id);
        r.setTitle("aTitle with id:" + id);
        r.setDescription("A sample Requirement with id:" + id);
        return r;
    }

    private static void initializeRequirements(int size) {
        for (int i = 0; i < size; i++) {
            nextRequirementId++;
            String id = Integer.toString(nextRequirementId);
            Requirement r = produceRandomRequirement(id);
            requirements.put(id, r);
        }
    }

    public static Requirement createOrUpdateRequirement(HttpServletRequest httpServletRequest, final Requirement aResource) {
        if (!requirements.containsKey(aResource.getIdentifier())) {
            nextRequirementId++;
            String id = Integer.toString(nextRequirementId);
            URI uri = RMToolResourcesFactory.constructURIForRequirement(id);
            aResource.setAbout(uri);
            requirements.put(id, aResource);
            trsEventHandler.onCreated(aResource);
        }
        else {
            URI uri = RMToolResourcesFactory.constructURIForRequirement(aResource.getIdentifier());
            aResource.setAbout(uri);
            requirements.put(aResource.getIdentifier(), aResource);
            trsEventHandler.onModified(aResource);
        }
        return aResource;
    }
    // End of user code

    public static void contextInitializeServletListener(final ServletContextEvent servletContextEvent)
    {
        
        // Start of user code contextInitializeServletListener
        initializeRequirements(37);
        // End of user code
        // Start of user code StoreInitialise
        // End of user code
        Properties lyoStoreProperties = new Properties();
        String lyoStorePropertiesFile = RMToolManager.class.getResource("/store.properties").getFile();
        try {
            lyoStoreProperties.load(new FileInputStream(lyoStorePropertiesFile));
        } catch (IOException e) {
            log.error("Failed to initialize Store. properties file for Store configuration could not be loaded.", e);
            throw new RuntimeException(e);
        }
        
        int initialPoolSize = Integer.parseInt(lyoStoreProperties.getProperty("initialPoolSize"));
        URI defaultNamedGraph;
        URI sparqlQueryEndpoint;
        URI sparqlUpdateEndpoint;
        try {
            defaultNamedGraph = new URI(lyoStoreProperties.getProperty("defaultNamedGraph"));
            sparqlQueryEndpoint = new URI(lyoStoreProperties.getProperty("sparqlQueryEndpoint"));
            sparqlUpdateEndpoint = new URI(lyoStoreProperties.getProperty("sparqlUpdateEndpoint"));
        } catch (URISyntaxException e) {
            log.error("Failed to initialize Store. One of the configuration property ('defaultNamedGraph' or 'sparqlQueryEndpoint' or 'sparqlUpdateEndpoint') is not a valid URI.", e);
            throw new RuntimeException(e);
        }
        String userName = null;
        String password = null;
        storePool = new StorePool(initialPoolSize, defaultNamedGraph, sparqlQueryEndpoint, sparqlUpdateEndpoint, userName, password);
        // Start of user code StoreFinalize
        // End of user code
        
        // Start of user code TRSInitialise
        // End of user code
        ArrayList<URI> uris = new ArrayList<URI>();
        // Start of user code TRSInitialBase
        ArrayList<Requirement> requirements = getRequirements();
        for (Iterator iterator = requirements.iterator(); iterator.hasNext();) {
            uris.add(((Requirement) iterator.next()).getAbout());
        }
        // End of user code
        InmemPagedTrs temp = new PagedTrsFactory().getInmemPagedTrs(50, 50, uris);
        pagedTrs = temp;
        trsEventHandler = temp;
        // Start of user code TRSFinalize
        // End of user code
    }

    public static void contextDestroyServletListener(ServletContextEvent servletContextEvent) 
    {
        
        // Start of user code contextDestroyed
        // TODO Implement code to shutdown connections to data backbone etc...
        // End of user code
    }

    public static ServiceProviderInfo[] getServiceProviderInfos(HttpServletRequest httpServletRequest)
    {
        ServiceProviderInfo[] serviceProviderInfos = {};
        
        // Start of user code "ServiceProviderInfo[] getServiceProviderInfos(...)"
        ServiceProviderInfo r1 = new ServiceProviderInfo();
        r1.name = "A sample RM Service Provider 1";
        r1.serviceProviderId = "1";

        ServiceProviderInfo r2 = new ServiceProviderInfo();
        r2.name = "A sample RM Service Provider 2";
        r2.serviceProviderId = "2";

        serviceProviderInfos = new ServiceProviderInfo[2];
        serviceProviderInfos[0] = r1;
        serviceProviderInfos[1] = r2;
        // End of user code
        return serviceProviderInfos;
    }

    public static List<Requirement> queryRequirements(HttpServletRequest httpServletRequest, String where, String prefix, boolean paging, int page, int limit)
    {
        List<Requirement> resources = null;
        
        // Start of user code queryRequirements_storeInit
        // End of user code
        Store store = storePool.getStore();
        try {
            resources = new ArrayList<Requirement>(store.getResources(storePool.getDefaultNamedGraphUri(), Requirement.class, prefix, where, "", limit+1, page*limit));
        } catch (StoreAccessException | ModelUnmarshallingException e) {
            log.error("Failed to query resources, with where-string '" + where + "'", e);
            throw new WebApplicationException("Failed to query resources, with where-string '" + where + "'", e, Status.INTERNAL_SERVER_ERROR);
        } finally {
            storePool.releaseStore(store);
        }
        // Start of user code queryRequirements_storeFinalize
        // End of user code
        
        // Start of user code queryRequirements
        resources = new ArrayList<>(requirements.values());
        // End of user code
        return resources;
    }
    public static List<Requirement> RequirementSelector(HttpServletRequest httpServletRequest, String terms)   
    {
        List<Requirement> resources = null;
        
        // Start of user code RequirementSelector_storeInit
        // End of user code
        Store store = storePool.getStore();
        try {
            resources = new ArrayList<Requirement>(store.getResources(storePool.getDefaultNamedGraphUri(), Requirement.class, "", "", terms, 20, -1));
        } catch (StoreAccessException | ModelUnmarshallingException e) {
            log.error("Failed to search resources, with search-term '" + terms + "'", e);
            throw new WebApplicationException("Failed to search resources, with search-term '" + terms + "'", e, Status.INTERNAL_SERVER_ERROR);
        } finally {
            storePool.releaseStore(store);
        }
        // Start of user code RequirementSelector_storeFinalize
        // End of user code
        
        // Start of user code RequirementSelector
        resources = new ArrayList<>(requirements.values());
        // End of user code
        return resources;
    }
    public static Requirement createRequirement(HttpServletRequest httpServletRequest, final Requirement aResource)
    {
        Requirement newResource = null;
        
        
        // Start of user code createRequirement
        newResource = createOrUpdateRequirement(httpServletRequest, aResource);
        // End of user code
        return newResource;
    }

    public static Requirement createRequirementFromDialog(HttpServletRequest httpServletRequest, final Requirement aResource)
    {
        Requirement newResource = null;
        
        
        // Start of user code createRequirementFromDialog
        newResource = createOrUpdateRequirement(httpServletRequest, aResource);
        // End of user code
        return newResource;
    }



    public static Requirement getRequirement(HttpServletRequest httpServletRequest, final String requirementId)
    {
        Requirement aResource = null;
        
        // Start of user code getRequirement_storeInit
        // End of user code
        Store store = storePool.getStore();
        URI uri = RMToolResourcesFactory.constructURIForRequirement(requirementId);
        try {
            aResource = store.getResource(storePool.getDefaultNamedGraphUri(), uri, Requirement.class);
        } catch (NoSuchElementException e) {
            log.error("Resource: '" + uri + "' not found");
            throw new WebApplicationException("Failed to get resource: '" + uri + "'", e, Status.NOT_FOUND);
        } catch (StoreAccessException | ModelUnmarshallingException  e) {
            log.error("Failed to get resource: '" + uri + "'", e);
            throw new WebApplicationException("Failed to get resource: '" + uri + "'", e, Status.INTERNAL_SERVER_ERROR);
        } finally {
            storePool.releaseStore(store);
        }
        // Start of user code getRequirement_storeFinalize
        // End of user code
        
        // Start of user code getRequirement
        aResource = requirements.get(requirementId);
        // End of user code
        return aResource;
    }

    public static Boolean deleteRequirement(HttpServletRequest httpServletRequest, final String requirementId)
    {
        Boolean deleted = false;
        
        // Start of user code deleteRequirement
        // TODO Implement code to delete a resource
        // If you encounter problems, consider throwing the runtime exception WebApplicationException(message, cause, final httpStatus)
        // End of user code
        return deleted;
    }

    public static Requirement updateRequirement(HttpServletRequest httpServletRequest, final Requirement aResource, final String requirementId) {
        Requirement updatedResource = null;
        // Start of user code updateRequirement_storeInit
        // End of user code
        Store store = storePool.getStore();
        URI uri = RMToolResourcesFactory.constructURIForRequirement(requirementId);
        if (!store.resourceExists(storePool.getDefaultNamedGraphUri(), uri)) {
            log.error("Cannot update a resource that does not already exists: '" + uri + "'");
            throw new WebApplicationException("Cannot update a resource that does not already exists: '" + uri + "'", Status.NOT_FOUND);
        }
        aResource.setAbout(uri);
        try {
            store.updateResources(storePool.getDefaultNamedGraphUri(), aResource);
        } catch (StoreAccessException e) {
            log.error("Failed to update resource: '" + uri + "'", e);
            throw new WebApplicationException("Failed to update resource: '" + uri + "'", e);
        } finally {
            storePool.releaseStore(store);
        }
        updatedResource = aResource;
        // Start of user code updateRequirement_storeFinalize
        // End of user code
        
        // Start of user code updateRequirement
        updatedResource = createOrUpdateRequirement(httpServletRequest, aResource);
        // End of user code
        return updatedResource;
    }

    public static String getETagFromRequirement(final Requirement aResource)
    {
        String eTag = null;
        // Start of user code getETagFromRequirement
        // TODO Implement code to return an ETag for a particular resource
        // End of user code
        return eTag;
    }

}
