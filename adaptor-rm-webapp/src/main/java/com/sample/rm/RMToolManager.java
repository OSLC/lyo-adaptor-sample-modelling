// Start of user code Copyright
/*******************************************************************************
 * Copyright (c) 2011, 2012 IBM Corporation and others.
 *
 *  All rights reserved. This program and the accompanying materials
 *  are made available under the terms of the Eclipse Public License v1.0
 *  and Eclipse Distribution License v. 1.0 which accompanies this distribution.
 *  
 *  The Eclipse Public License is available at http://www.eclipse.org/legal/epl-v10.html
 *  and the Eclipse Distribution License is available at
 *  http://www.eclipse.org/org/documents/edl-v10.php.
 *  
 *  Contributors:
 *  
 *	   Sam Padgett	       - initial API and implementation
 *     Michael Fiedler     - adapted for OSLC4J
 *     Jad El-khoury        - initial implementation of code generator (https://bugs.eclipse.org/bugs/show_bug.cgi?id=422448)
 *     Matthieu Helleboid   - Support for multiple Service Providers.
 *     Anass Radouani       - Support for multiple Service Providers.
 *
 * This file is generated by org.eclipse.lyo.oslc4j.codegenerator
 *******************************************************************************/
// End of user code

package com.sample.rm;

// Start of user code Notice
//Note: The Lyo code generator is migrating the name of this class from 'RMToolManager' to the new shorter name 'RestDelegate'.
//You are still using the old name. The generator will continue to use this old name until you actively trigger the change.
//To migrate to the new class name:
//1. Rename your class to RestDelegate 
//    * Please rename and do not simply create a copy of the file. The generator needs to detect the file deletion in order to activate the name change.
//2. Regenerate the code. 
//    * The generator will generate this class with the new name.
//    * Besides the class name, the code - including the user clode blocks - remain intact.
//    * All other class references to the new class name are updated.
//3. Delete this notice
// End of user code

import javax.inject.Inject;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.ServletContextEvent;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.eclipse.lyo.oslc4j.core.model.ServiceProvider;
import org.eclipse.lyo.oslc4j.core.OSLC4JUtils;
import org.eclipse.lyo.oslc4j.core.model.AbstractResource;
import com.sample.rm.servlet.ServiceProviderCatalogSingleton;
import com.sample.rm.ServiceProviderInfo;
import com.sample.rm.resources.Comment;
import com.sample.rm.resources.Person;
import com.sample.rm.resources.Requirement;
import com.sample.rm.resources.TestScript;

import org.eclipse.lyo.oslc4j.trs.server.TrsEventHandler;


// Start of user code imports
import java.util.Date;
import org.eclipse.lyo.oslc4j.core.model.Link;
import java.util.concurrent.ThreadLocalRandom;
import java.net.URI;
import java.net.URISyntaxException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Iterator;
// End of user code

// Start of user code pre_class_code
// End of user code

public class RMToolManager {

    private static final Logger log = LoggerFactory.getLogger(RMToolManager.class);

    
    @Inject TrsEventHandler trsEventHandler;
    @Inject RMToolResourcesFactory resourcesFactory;
    // Start of user code class_attributes
    private static Map<String, Requirement> requirements = null;
    private static Map<String, TestScript> testScripts = null;
    private static List<String> priority = Arrays.asList("low", "medium", "high", "veryHigh");
    private static List<String> status = Arrays.asList("open", "inProgress", "underReview", "reviewed", "closeds");

    private static int nextRequirementId;
    private static int nextTestScriptId;
    // End of user code
    
    public RMToolManager() {
        log.trace("Delegate is initialized");
    }
    
    
    // Start of user code class_methods
	private int randomNumber(int origin, int bound) {
		return ThreadLocalRandom.current().nextInt(origin, bound);
	}

    public ArrayList<Requirement> getRequirements() {
        return new ArrayList<Requirement>(requirements.values());
    }

    public ArrayList<TestScript> getTestScripts() {
        return new ArrayList<TestScript>(testScripts.values());
    }

    private Requirement produceRandomRequirement(String id) {
        Requirement r = null;
        r = resourcesFactory.createRequirement(id);
        r.setIdentifier(id);
        r.setTitle("aTitle with id:" + id);
        r.setDescription("A sample Requirement with id:" + id + "<br>" + "with more lines" + "<br>" + "and one final line");
        r.setPriority(priority.get(randomNumber(0, priority.size()-1)));
        r.setApprovalDate(new Date());
        r.setStatus(status.get(randomNumber(0, status.size()-1)));
        r.setAuthor(new Link(URI.create("http://localhost:8083/adaptor-rm/services/person/" + id), "myAuthorname" + id));
        for (int i = 0; i < 5; i++) {
            Comment c = new Comment();
            c.setDescription("this is a comment " + i);
            c.setDate(new Date());
            c.setAuthor(new Link(URI.create("http://localhost:8083/adaptor-rm/services/person/" + id), "myAuthorname" + id));
            r.addComments(c);
        }
        int tc = randomNumber(0, 6);
        for (int i = 0; i < tc; i++) {
            int p = randomNumber(1, testScripts.size()-1);
            String v = Integer.toString(p);
            r.addTestScripts(new Link(testScripts.get(v).getAbout()));
        }
        r.setSomeIntegerProperty(Integer.parseInt(id));
        for (int i = 0; i < 3; i++) {
            r.addSomeListOfIntegers(Integer.parseInt(id)+i);
        }
        return r;
    }

    private TestScript produceRandomTestScript(String id) {
        TestScript r = null;
        r = resourcesFactory.createTestScript(id);
        r.setTitle("aTitle with id:" + id);
        r.setDescription("A sample TestScript with id:" + id + "<br>" + "with more lines" + "<br>" + "and one final line");
        r.setExecutionInstructions("Some instructions with id:" + id + "<br>" + "with more lines" + "<br>" + "and one final line");
        r.setCreated(new Date());
        r.setCreator(new Link(URI.create("http://localhost:8083/adaptor-rm/services/person/" + id), "myAuthorname" + id));
        return r;
    }

    public void initializeResources() {
        initializeTestScripts();
        initializeRequirements();
    }

    public void initializeRequirements() {
        if (null != requirements) {
            return;
        }
        int size = 20;
        requirements = new HashMap<String, Requirement>(size+100);
        for (int i = 0; i < size; i++) {
            nextRequirementId++;
            String id = Integer.toString(nextRequirementId);
            Requirement r = produceRandomRequirement(id);
            requirements.put(id, r);
        }
    }

    public void initializeTestScripts() {
        if (null != testScripts) {
            return;
        }
        int size = 20;
        testScripts = new HashMap<String, TestScript>(size+100);
        for (int i = 0; i < size; i++) {
            nextTestScriptId++;
            String id = Integer.toString(nextTestScriptId);
            TestScript r = produceRandomTestScript(id);
            testScripts.put(id, r);
        }
    }

    public Requirement createOrUpdateRequirement(HttpServletRequest httpServletRequest, final Requirement aResource) {
        if (!requirements.containsKey(aResource.getIdentifier())) {
            nextRequirementId++;
            String id = Integer.toString(nextRequirementId);
            URI uri = resourcesFactory.constructURIForRequirement(id);
            aResource.setAbout(uri);
            requirements.put(id, aResource);
        }
        else {
            URI uri = resourcesFactory.constructURIForRequirement(aResource.getIdentifier());
            aResource.setAbout(uri);
            requirements.put(aResource.getIdentifier(), aResource);
        }
        return aResource;
    }
    // End of user code

    //The methods contextInitializeServletListener() and contextDestroyServletListener() no longer exits
    //Migrate any user-specific code blocks to the class com.sample.rm.servlet.ServletListener
    //Any user-specific code should be found in *.lost files.

    public static ServiceProviderInfo[] getServiceProviderInfos(HttpServletRequest httpServletRequest)
    {
        ServiceProviderInfo[] serviceProviderInfos = {};
        
        // Start of user code "ServiceProviderInfo[] getServiceProviderInfos(...)"
        ServiceProviderInfo r1 = new ServiceProviderInfo();
        r1.name = "A sample RM Service Provider 1";
        r1.serviceProviderId = "1";

        ServiceProviderInfo r2 = new ServiceProviderInfo();
        r2.name = "A sample RM Service Provider 2";
        r2.serviceProviderId = "2";

        serviceProviderInfos = new ServiceProviderInfo[2];
        serviceProviderInfos[0] = r1;
        serviceProviderInfos[1] = r2;
        // End of user code
        return serviceProviderInfos;
    }

    public List<Requirement> queryRequirements(HttpServletRequest httpServletRequest, String where, String prefix, boolean paging, int page, int limit)
    {
        List<Requirement> resources = null;
        
        
        // Start of user code queryRequirements
        initializeResources();
        resources = new ArrayList<>(requirements.values());
        // End of user code
        return resources;
    }
    public List<Requirement> RequirementSelector(HttpServletRequest httpServletRequest, String terms)
    {
        List<Requirement> resources = null;
        
        
        // Start of user code RequirementSelector
        initializeResources();
        resources = new ArrayList<>(requirements.values());
        // End of user code
        return resources;
    }
    public Requirement createRequirement(HttpServletRequest httpServletRequest, final Requirement aResource)
    {
        Requirement newResource = null;
        
        
        // Start of user code createRequirement
        initializeResources();
        newResource = createOrUpdateRequirement(httpServletRequest, aResource);
        // End of user code
        return newResource;
    }

    public Requirement createRequirementFromDialog(HttpServletRequest httpServletRequest, final Requirement aResource)
    {
        Requirement newResource = null;
        
        
        // Start of user code createRequirementFromDialog
        initializeResources();
        newResource = createOrUpdateRequirement(httpServletRequest, aResource);
        // End of user code
        return newResource;
    }


    public List<TestScript> queryTestScripts(HttpServletRequest httpServletRequest, String where, String prefix, boolean paging, int page, int limit)
    {
        List<TestScript> resources = null;
        
        
        // Start of user code queryTestScripts
        initializeResources();
        resources = new ArrayList<>(testScripts.values());
        // End of user code
        return resources;
    }
    public List<TestScript> TestScriptSelector(HttpServletRequest httpServletRequest, String terms)
    {
        List<TestScript> resources = null;
        
        
        // Start of user code TestScriptSelector
        initializeResources();
        resources = new ArrayList<>(testScripts.values());
        // End of user code
        return resources;
    }




    public Requirement getRequirement(HttpServletRequest httpServletRequest, final String requirementId)
    {
        Requirement aResource = null;
        
        
        // Start of user code getRequirement
        initializeResources();
        aResource = requirements.get(requirementId);
        // End of user code
        return aResource;
    }

    public Boolean deleteRequirement(HttpServletRequest httpServletRequest, final String requirementId)
    {
        Boolean deleted = false;
        
        // Start of user code deleteRequirement
        // TODO Implement code to delete a resource
        // If you encounter problems, consider throwing the runtime exception WebApplicationException(message, cause, final httpStatus)
        // End of user code
        return deleted;
    }

    public Requirement updateRequirement(HttpServletRequest httpServletRequest, final Requirement aResource, final String requirementId) {
        Requirement updatedResource = null;
        
        // Start of user code updateRequirement
        initializeResources();
        updatedResource = createOrUpdateRequirement(httpServletRequest, aResource);
        // End of user code
        return updatedResource;
    }
    public TestScript getTestScript(HttpServletRequest httpServletRequest, final String testScriptId)
    {
        TestScript aResource = null;
        
        
        // Start of user code getTestScript
        initializeResources();
        aResource = testScripts.get(testScriptId);
        // End of user code
        return aResource;
    }



    public String getETagFromRequirement(final Requirement aResource)
    {
        String eTag = null;
        // Start of user code getETagFromRequirement
        // TODO Implement code to return an ETag for a particular resource
        // End of user code
        return eTag;
    }
    public String getETagFromTestScript(final TestScript aResource)
    {
        String eTag = null;
        // Start of user code getETagFromTestScript
        // TODO Implement code to return an ETag for a particular resource
        // If you encounter problems, consider throwing the runtime exception WebApplicationException(message, cause, final httpStatus)
        // End of user code
        return eTag;
    }

}
