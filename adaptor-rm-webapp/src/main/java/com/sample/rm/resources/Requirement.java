// Start of user code Copyright
/*******************************************************************************
 * Copyright (c) 2012 IBM Corporation and others.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * and Eclipse Distribution License v. 1.0 which accompanies this distribution.
 *
 * The Eclipse Public License is available at http://www.eclipse.org/legal/epl-v10.html
 * and the Eclipse Distribution License is available at
 * http://www.eclipse.org/org/documents/edl-v10.php.
 *
 * Contributors:
 *
 *     Russell Boykin       - initial API and implementation
 *     Alberto Giammaria    - initial API and implementation
 *     Chris Peters         - initial API and implementation
 *     Gianluca Bernardini  - initial API and implementation
 *       Sam Padgett          - initial API and implementation
 *     Michael Fiedler      - adapted for OSLC4J
 *     Jad El-khoury        - initial implementation of code generator (422448)
 *     Matthieu Helleboid   - Support for multiple Service Providers.
 *     Anass Radouani       - Support for multiple Service Providers.
 *
 * This file is generated by org.eclipse.lyo.oslc4j.codegenerator
 *******************************************************************************/
// End of user code

package com.sample.rm.resources;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.text.SimpleDateFormat;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;
import java.util.Iterator;

import org.eclipse.lyo.oslc4j.core.OSLC4JUtils;
import org.eclipse.lyo.oslc4j.core.exception.OslcCoreApplicationException;
import org.eclipse.lyo.oslc4j.core.annotation.OslcAllowedValue;
import org.eclipse.lyo.oslc4j.core.annotation.OslcDescription;
import org.eclipse.lyo.oslc4j.core.annotation.OslcMemberProperty;
import org.eclipse.lyo.oslc4j.core.annotation.OslcName;
import org.eclipse.lyo.oslc4j.core.annotation.OslcNamespace;
import org.eclipse.lyo.oslc4j.core.annotation.OslcOccurs;
import org.eclipse.lyo.oslc4j.core.annotation.OslcPropertyDefinition;
import org.eclipse.lyo.oslc4j.core.annotation.OslcRdfCollectionType;
import org.eclipse.lyo.oslc4j.core.annotation.OslcRange;
import org.eclipse.lyo.oslc4j.core.annotation.OslcReadOnly;
import org.eclipse.lyo.oslc4j.core.annotation.OslcRepresentation;
import org.eclipse.lyo.oslc4j.core.annotation.OslcResourceShape;
import org.eclipse.lyo.oslc4j.core.annotation.OslcTitle;
import org.eclipse.lyo.oslc4j.core.annotation.OslcValueType;
import org.eclipse.lyo.oslc4j.core.model.AbstractResource;
import org.eclipse.lyo.oslc4j.core.model.Link;
import org.eclipse.lyo.oslc4j.core.model.Occurs;
import org.eclipse.lyo.oslc4j.core.model.OslcConstants;
import org.eclipse.lyo.oslc4j.core.model.Representation;
import org.eclipse.lyo.oslc4j.core.model.ValueType;
import org.eclipse.lyo.oslc4j.core.model.ResourceShape;
import org.eclipse.lyo.oslc4j.core.model.ResourceShapeFactory;

import com.sample.rm.resources.Oslc_rmDomainConstants;


import com.sample.rm.resources.FoafDomainConstants;
import com.sample.rm.resources.DctermsDomainConstants;
import com.sample.rm.resources.Oslc_qmDomainConstants;
import com.sample.rm.resources.Oslc_rmDomainConstants;

import com.sample.rm.resources.Person;
import com.sample.rm.resources.TestScript;
// Start of user code imports
// End of user code

// Start of user code preClassCode
// End of user code

// Start of user code classAnnotations
// End of user code
@OslcNamespace(Oslc_rmDomainConstants.REQUIREMENT_NAMESPACE)
@OslcName(Oslc_rmDomainConstants.REQUIREMENT_LOCALNAME)
@OslcResourceShape(title = "Requirement Shape", describes = Oslc_rmDomainConstants.REQUIREMENT_TYPE)
public class Requirement
    extends AbstractResource
    implements IRequirement
{
    // Start of user code attributeAnnotation:identifier
    // End of user code
    private String identifier;
    // Start of user code attributeAnnotation:title
    // End of user code
    private String title;
    // Start of user code attributeAnnotation:description
    // End of user code
    private String description;
    // Start of user code attributeAnnotation:priority
    // End of user code
    private String priority;
    // Start of user code attributeAnnotation:approvalDate
    // End of user code
    private Date approvalDate;
    // Start of user code attributeAnnotation:status
    // End of user code
    private String status;
    // Start of user code attributeAnnotation:author
    // End of user code
    private Link author;
    // Start of user code attributeAnnotation:comments
    // End of user code
    private Set<String> comments = new HashSet<String>();
    // Start of user code attributeAnnotation:testScripts
    // End of user code
    private Set<Link> testScripts = new HashSet<Link>();
    // Start of user code attributeAnnotation:someIntegerProperty
    // End of user code
    private Integer someIntegerProperty;
    // Start of user code attributeAnnotation:someListOfIntegers
    // End of user code
    private Set<Integer> someListOfIntegers = new HashSet<Integer>();
    
    // Start of user code classAttributes
    // End of user code
    // Start of user code classMethods
    // End of user code
    public Requirement()
    {
        super();
    
        // Start of user code constructor1
        // End of user code
    }
    
    public Requirement(final URI about)
    {
        super(about);
    
        // Start of user code constructor2
        // End of user code
    }
    
    public static ResourceShape createResourceShape() throws OslcCoreApplicationException, URISyntaxException {
        return ResourceShapeFactory.createResourceShape(OSLC4JUtils.getServletURI(),
        OslcConstants.PATH_RESOURCE_SHAPES,
        Oslc_rmDomainConstants.REQUIREMENT_PATH,
        Requirement.class);
    }
    
    
    public String toString()
    {
        return toString(false);
    }
    
    public String toString(boolean asLocalResource)
    {
        String result = "";
        // Start of user code toString_init
        // End of user code
    
        if (asLocalResource) {
            result = result + "{a Local Requirement Resource} - update Requirement.toString() to present resource as desired.";
            // Start of user code toString_bodyForLocalResource
            // End of user code
        }
        else {
            result = String.valueOf(getAbout());
        }
    
        // Start of user code toString_finalize
        // End of user code
    
        return result;
    }
    
    public void addComments(final String comments)
    {
        this.comments.add(comments);
    }
    
    public void addTestScripts(final Link testScripts)
    {
        this.testScripts.add(testScripts);
    }
    
    public void addSomeListOfIntegers(final Integer someListOfIntegers)
    {
        this.someListOfIntegers.add(someListOfIntegers);
    }
    
    
    // Start of user code getterAnnotation:identifier
    // End of user code
    @OslcName("identifier")
    @OslcPropertyDefinition(DctermsDomainConstants.DUBLIN_CORE_NAMSPACE + "identifier")
    @OslcOccurs(Occurs.ExactlyOne)
    @OslcValueType(ValueType.String)
    @OslcReadOnly(false)
    public String getIdentifier()
    {
        // Start of user code getterInit:identifier
        // End of user code
        return identifier;
    }
    
    // Start of user code getterAnnotation:title
    // End of user code
    @OslcName("title")
    @OslcPropertyDefinition(DctermsDomainConstants.DUBLIN_CORE_NAMSPACE + "title")
    @OslcOccurs(Occurs.ExactlyOne)
    @OslcValueType(ValueType.String)
    @OslcReadOnly(false)
    public String getTitle()
    {
        // Start of user code getterInit:title
        // End of user code
        return title;
    }
    
    // Start of user code getterAnnotation:description
    // End of user code
    @OslcName("description")
    @OslcPropertyDefinition(DctermsDomainConstants.DUBLIN_CORE_NAMSPACE + "description")
    @OslcOccurs(Occurs.ExactlyOne)
    @OslcValueType(ValueType.String)
    @OslcReadOnly(false)
    public String getDescription()
    {
        // Start of user code getterInit:description
        // End of user code
        return description;
    }
    
    // Start of user code getterAnnotation:priority
    // End of user code
    @OslcName("priority")
    @OslcPropertyDefinition(Oslc_rmDomainConstants.REQUIREMENTS_MANAGEMENT_NAMSPACE + "priority")
    @OslcOccurs(Occurs.ExactlyOne)
    @OslcValueType(ValueType.String)
    @OslcReadOnly(false)
    public String getPriority()
    {
        // Start of user code getterInit:priority
        // End of user code
        return priority;
    }
    
    // Start of user code getterAnnotation:approvalDate
    // End of user code
    @OslcName("approvalDate")
    @OslcPropertyDefinition(Oslc_rmDomainConstants.REQUIREMENTS_MANAGEMENT_NAMSPACE + "approvalDate")
    @OslcOccurs(Occurs.ExactlyOne)
    @OslcValueType(ValueType.DateTime)
    @OslcReadOnly(false)
    public Date getApprovalDate()
    {
        // Start of user code getterInit:approvalDate
        // End of user code
        return approvalDate;
    }
    
    // Start of user code getterAnnotation:status
    // End of user code
    @OslcName("status")
    @OslcPropertyDefinition(Oslc_rmDomainConstants.REQUIREMENTS_MANAGEMENT_NAMSPACE + "status")
    @OslcOccurs(Occurs.ExactlyOne)
    @OslcValueType(ValueType.String)
    @OslcReadOnly(false)
    public String getStatus()
    {
        // Start of user code getterInit:status
        // End of user code
        return status;
    }
    
    // Start of user code getterAnnotation:author
    // End of user code
    @OslcName("author")
    @OslcPropertyDefinition(Oslc_rmDomainConstants.REQUIREMENTS_MANAGEMENT_NAMSPACE + "author")
    @OslcOccurs(Occurs.ExactlyOne)
    @OslcValueType(ValueType.Resource)
    @OslcRange({FoafDomainConstants.PERSON_TYPE})
    @OslcReadOnly(false)
    public Link getAuthor()
    {
        // Start of user code getterInit:author
        // End of user code
        return author;
    }
    
    // Start of user code getterAnnotation:comments
    // End of user code
    @OslcName("comments")
    @OslcPropertyDefinition(Oslc_rmDomainConstants.REQUIREMENTS_MANAGEMENT_NAMSPACE + "comments")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.String)
    @OslcReadOnly(false)
    public Set<String> getComments()
    {
        // Start of user code getterInit:comments
        // End of user code
        return comments;
    }
    
    // Start of user code getterAnnotation:testScripts
    // End of user code
    @OslcName("testScripts")
    @OslcPropertyDefinition(Oslc_rmDomainConstants.REQUIREMENTS_MANAGEMENT_NAMSPACE + "testScripts")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.Resource)
    @OslcRange({Oslc_qmDomainConstants.TESTSCRIPT_TYPE})
    @OslcReadOnly(false)
    public Set<Link> getTestScripts()
    {
        // Start of user code getterInit:testScripts
        // End of user code
        return testScripts;
    }
    
    // Start of user code getterAnnotation:someIntegerProperty
    // End of user code
    @OslcName("someIntegerProperty")
    @OslcPropertyDefinition(Oslc_rmDomainConstants.REQUIREMENTS_MANAGEMENT_NAMSPACE + "someIntegerProperty")
    @OslcOccurs(Occurs.ExactlyOne)
    @OslcValueType(ValueType.Integer)
    @OslcReadOnly(false)
    public Integer getSomeIntegerProperty()
    {
        // Start of user code getterInit:someIntegerProperty
        // End of user code
        return someIntegerProperty;
    }
    
    // Start of user code getterAnnotation:someListOfIntegers
    // End of user code
    @OslcName("someListOfIntegers")
    @OslcPropertyDefinition(Oslc_rmDomainConstants.REQUIREMENTS_MANAGEMENT_NAMSPACE + "someListOfIntegers")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.Integer)
    @OslcReadOnly(false)
    public Set<Integer> getSomeListOfIntegers()
    {
        // Start of user code getterInit:someListOfIntegers
        // End of user code
        return someListOfIntegers;
    }
    
    
    // Start of user code setterAnnotation:identifier
    // End of user code
    public void setIdentifier(final String identifier )
    {
        // Start of user code setterInit:identifier
        // End of user code
        this.identifier = identifier;
    
        // Start of user code setterFinalize:identifier
        // End of user code
    }
    
    // Start of user code setterAnnotation:title
    // End of user code
    public void setTitle(final String title )
    {
        // Start of user code setterInit:title
        // End of user code
        this.title = title;
    
        // Start of user code setterFinalize:title
        // End of user code
    }
    
    // Start of user code setterAnnotation:description
    // End of user code
    public void setDescription(final String description )
    {
        // Start of user code setterInit:description
        // End of user code
        this.description = description;
    
        // Start of user code setterFinalize:description
        // End of user code
    }
    
    // Start of user code setterAnnotation:priority
    // End of user code
    public void setPriority(final String priority )
    {
        // Start of user code setterInit:priority
        // End of user code
        this.priority = priority;
    
        // Start of user code setterFinalize:priority
        // End of user code
    }
    
    // Start of user code setterAnnotation:approvalDate
    // End of user code
    public void setApprovalDate(final Date approvalDate )
    {
        // Start of user code setterInit:approvalDate
        // End of user code
        this.approvalDate = approvalDate;
    
        // Start of user code setterFinalize:approvalDate
        // End of user code
    }
    
    // Start of user code setterAnnotation:status
    // End of user code
    public void setStatus(final String status )
    {
        // Start of user code setterInit:status
        // End of user code
        this.status = status;
    
        // Start of user code setterFinalize:status
        // End of user code
    }
    
    // Start of user code setterAnnotation:author
    // End of user code
    public void setAuthor(final Link author )
    {
        // Start of user code setterInit:author
        // End of user code
        this.author = author;
    
        // Start of user code setterFinalize:author
        // End of user code
    }
    
    // Start of user code setterAnnotation:comments
    // End of user code
    public void setComments(final Set<String> comments )
    {
        // Start of user code setterInit:comments
        // End of user code
        this.comments.clear();
        if (comments != null)
        {
            this.comments.addAll(comments);
        }
    
        // Start of user code setterFinalize:comments
        // End of user code
    }
    
    // Start of user code setterAnnotation:testScripts
    // End of user code
    public void setTestScripts(final Set<Link> testScripts )
    {
        // Start of user code setterInit:testScripts
        // End of user code
        this.testScripts.clear();
        if (testScripts != null)
        {
            this.testScripts.addAll(testScripts);
        }
    
        // Start of user code setterFinalize:testScripts
        // End of user code
    }
    
    // Start of user code setterAnnotation:someIntegerProperty
    // End of user code
    public void setSomeIntegerProperty(final Integer someIntegerProperty )
    {
        // Start of user code setterInit:someIntegerProperty
        // End of user code
        this.someIntegerProperty = someIntegerProperty;
    
        // Start of user code setterFinalize:someIntegerProperty
        // End of user code
    }
    
    // Start of user code setterAnnotation:someListOfIntegers
    // End of user code
    public void setSomeListOfIntegers(final Set<Integer> someListOfIntegers )
    {
        // Start of user code setterInit:someListOfIntegers
        // End of user code
        this.someListOfIntegers.clear();
        if (someListOfIntegers != null)
        {
            this.someListOfIntegers.addAll(someListOfIntegers);
        }
    
        // Start of user code setterFinalize:someListOfIntegers
        // End of user code
    }
    
    
}
