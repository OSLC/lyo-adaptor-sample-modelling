// Start of user code Copyright
/*******************************************************************************
 * Copyright (c) 2012 IBM Corporation and others.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * and Eclipse Distribution License v. 1.0 which accompanies this distribution.
 *
 * The Eclipse Public License is available at http://www.eclipse.org/legal/epl-v10.html
 * and the Eclipse Distribution License is available at
 * http://www.eclipse.org/org/documents/edl-v10.php.
 *
 * Contributors:
 *
 *     Russell Boykin       - initial API and implementation
 *     Alberto Giammaria    - initial API and implementation
 *     Chris Peters         - initial API and implementation
 *     Gianluca Bernardini  - initial API and implementation
 *       Sam Padgett          - initial API and implementation
 *     Michael Fiedler      - adapted for OSLC4J
 *     Jad El-khoury        - initial implementation of code generator (422448)
 *     Matthieu Helleboid   - Support for multiple Service Providers.
 *     Anass Radouani       - Support for multiple Service Providers.
 *
 * This file is generated by org.eclipse.lyo.oslc4j.codegenerator
 *******************************************************************************/
// End of user code

package com.sample.rm.resources;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.text.SimpleDateFormat;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;
import java.util.Iterator;
import javax.servlet.http.HttpServletRequest;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import javax.ws.rs.core.UriBuilder;

import org.eclipse.lyo.oslc4j.core.OSLC4JUtils;
import org.eclipse.lyo.oslc4j.core.exception.OslcCoreApplicationException;
import org.eclipse.lyo.oslc4j.core.annotation.OslcAllowedValue;
import org.eclipse.lyo.oslc4j.core.annotation.OslcDescription;
import org.eclipse.lyo.oslc4j.core.annotation.OslcMemberProperty;
import org.eclipse.lyo.oslc4j.core.annotation.OslcName;
import org.eclipse.lyo.oslc4j.core.annotation.OslcNamespace;
import org.eclipse.lyo.oslc4j.core.annotation.OslcOccurs;
import org.eclipse.lyo.oslc4j.core.annotation.OslcPropertyDefinition;
import org.eclipse.lyo.oslc4j.core.annotation.OslcRange;
import org.eclipse.lyo.oslc4j.core.annotation.OslcReadOnly;
import org.eclipse.lyo.oslc4j.core.annotation.OslcRepresentation;
import org.eclipse.lyo.oslc4j.core.annotation.OslcResourceShape;
import org.eclipse.lyo.oslc4j.core.annotation.OslcTitle;
import org.eclipse.lyo.oslc4j.core.annotation.OslcValueType;
import org.eclipse.lyo.oslc4j.core.model.AbstractResource;
import org.eclipse.lyo.oslc4j.core.model.Link;
import org.eclipse.lyo.oslc4j.core.model.Occurs;
import org.eclipse.lyo.oslc4j.core.model.OslcConstants;
import org.eclipse.lyo.oslc4j.core.model.Representation;
import org.eclipse.lyo.oslc4j.core.model.ValueType;
import org.eclipse.lyo.oslc4j.core.model.ResourceShape;
import org.eclipse.lyo.oslc4j.core.model.ResourceShapeFactory;

import com.sample.rm.resources.OslcDomainConstants;


import com.sample.rm.resources.OslcDomainConstants;
import com.sample.rm.resources.TRS;
import com.sample.rm.resources.SP;

// Start of user code imports
// End of user code

// Start of user code preClassCode
// End of user code

// Start of user code classAnnotations
// End of user code
@OslcNamespace(OslcDomainConstants.PROVIDERTOTRS_NAMESPACE)
@OslcName(OslcDomainConstants.PROVIDERTOTRS_LOCALNAME)
@OslcResourceShape(title = "ProviderToTRS Resource Shape", describes = OslcDomainConstants.PROVIDERTOTRS_TYPE)
public class ProviderToTRS
    extends AbstractResource
    implements IProviderToTRS
{
    // Start of user code attributeAnnotation:tRS
    // End of user code
    private Link tRS = new Link();
    // Start of user code attributeAnnotation:serviceProvider
    // End of user code
    private Link serviceProvider = new Link();
    
    // Start of user code classAttributes
    // End of user code
    // Start of user code classMethods
    // End of user code
    public ProviderToTRS()
           throws URISyntaxException
    {
        super();
    
        // Start of user code constructor1
        // End of user code
    }
    
    public ProviderToTRS(final URI about)
           throws URISyntaxException
    {
        super(about);
    
        // Start of user code constructor2
        // End of user code
    }
    
    /**
    * @deprecated Use the methods in class {@link com.sample.rm.RMToolResourcesFactory} instead.
    */
    @Deprecated
    public ProviderToTRS(final String providerToTRSId)
           throws URISyntaxException
    {
        this (constructURI(providerToTRSId));
        // Start of user code constructor3
        // End of user code
    }
    
    /**
    * @deprecated Use the methods in class {@link com.sample.rm.RMToolResourcesFactory} instead.
    */
    @Deprecated
    public static URI constructURI(final String providerToTRSId)
    {
        String basePath = OSLC4JUtils.getServletURI();
        Map<String, Object> pathParameters = new HashMap<String, Object>();
        pathParameters.put("providerToTRSId", providerToTRSId);
        String instanceURI = "providerToTRSs/{providerToTRSId}";
    
        final UriBuilder builder = UriBuilder.fromUri(basePath);
        return builder.path(instanceURI).buildFromMap(pathParameters);
    }
    
    /**
    * @deprecated Use the methods in class {@link com.sample.rm.RMToolResourcesFactory} instead.
    */
    @Deprecated
    public static Link constructLink(final String providerToTRSId , final String label)
    {
        return new Link(constructURI(providerToTRSId), label);
    }
    
    /**
    * @deprecated Use the methods in class {@link com.sample.rm.RMToolResourcesFactory} instead.
    */
    @Deprecated
    public static Link constructLink(final String providerToTRSId)
    {
        return new Link(constructURI(providerToTRSId));
    }
    
    public static ResourceShape createResourceShape() throws OslcCoreApplicationException, URISyntaxException {
        return ResourceShapeFactory.createResourceShape(OSLC4JUtils.getServletURI(),
        OslcConstants.PATH_RESOURCE_SHAPES,
        OslcDomainConstants.PROVIDERTOTRS_PATH,
        ProviderToTRS.class);
    }
    
    
    public String toString()
    {
        return toString(false);
    }
    
    public String toString(boolean asLocalResource)
    {
        String result = "";
        // Start of user code toString_init
        // End of user code
    
        if (asLocalResource) {
            result = result + "{a Local ProviderToTRS Resource} - update ProviderToTRS.toString() to present resource as desired.";
            // Start of user code toString_bodyForLocalResource
            // End of user code
        }
        else {
            result = getAbout().toString();
        }
    
        // Start of user code toString_finalize
        // End of user code
    
        return result;
    }
    
    public String toHtml()
    {
        return toHtml(false);
    }
    
    public String toHtml(boolean asLocalResource)
    {
        String result = "";
        // Start of user code toHtml_init
        // End of user code
    
        if (asLocalResource) {
            result = toString(true);
            // Start of user code toHtml_bodyForLocalResource
            // End of user code
        }
        else {
            result = "<a href=\"" + getAbout() + "\" class=\"oslc-resource-link\">" + toString() + "</a>";
        }
    
        // Start of user code toHtml_finalize
        // End of user code
    
        return result;
    }
    
    
    // Start of user code getterAnnotation:tRS
    // End of user code
    @OslcName("tRS")
    @OslcPropertyDefinition(OslcDomainConstants.OSLC_DOMAINS_NAMSPACE + "tRS")
    @OslcOccurs(Occurs.ExactlyOne)
    @OslcValueType(ValueType.Resource)
    @OslcRange({OslcDomainConstants.TRS_TYPE})
    @OslcReadOnly(false)
    public Link getTRS()
    {
        // Start of user code getterInit:tRS
        // End of user code
        return tRS;
    }
    
    // Start of user code getterAnnotation:serviceProvider
    // End of user code
    @OslcName("serviceProvider")
    @OslcPropertyDefinition(OslcDomainConstants.OSLC_DOMAINS_NAMSPACE + "serviceProvider")
    @OslcOccurs(Occurs.ExactlyOne)
    @OslcValueType(ValueType.Resource)
    @OslcRange({OslcDomainConstants.SP_TYPE})
    @OslcReadOnly(false)
    public Link getServiceProvider()
    {
        // Start of user code getterInit:serviceProvider
        // End of user code
        return serviceProvider;
    }
    
    
    // Start of user code setterAnnotation:tRS
    // End of user code
    public void setTRS(final Link tRS )
    {
        // Start of user code setterInit:tRS
        // End of user code
        this.tRS = tRS;
    
        // Start of user code setterFinalize:tRS
        // End of user code
    }
    
    // Start of user code setterAnnotation:serviceProvider
    // End of user code
    public void setServiceProvider(final Link serviceProvider )
    {
        // Start of user code setterInit:serviceProvider
        // End of user code
        this.serviceProvider = serviceProvider;
    
        // Start of user code setterFinalize:serviceProvider
        // End of user code
    }
    
    
    static public String tRSToHtmlForCreation (final HttpServletRequest httpServletRequest)
    {
        String s = "";
    
        // Start of user code "Init:tRSToHtmlForCreation(...)"
        // End of user code
    
        s = s + "<label for=\"TRS\">TRS: </LABEL>";
    
        // Start of user code "Mid:tRSToHtmlForCreation(...)"
        // End of user code
    
        // Start of user code "Finalize:tRSToHtmlForCreation(...)"
        // End of user code
    
        return s;
    }
    
    static public String serviceProviderToHtmlForCreation (final HttpServletRequest httpServletRequest)
    {
        String s = "";
    
        // Start of user code "Init:serviceProviderToHtmlForCreation(...)"
        // End of user code
    
        s = s + "<label for=\"serviceProvider\">serviceProvider: </LABEL>";
    
        // Start of user code "Mid:serviceProviderToHtmlForCreation(...)"
        // End of user code
    
        // Start of user code "Finalize:serviceProviderToHtmlForCreation(...)"
        // End of user code
    
        return s;
    }
    
    
    public String tRSToHtml()
    {
        String s = "";
    
        // Start of user code tRStoHtml_mid
        // End of user code
    
        try {
            if ((tRS == null) || (tRS.getValue() == null)) {
                s = s + "<em>null</em>";
            }
            else {
                s = s + (new TRS (tRS.getValue())).toHtml(false);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    
        // Start of user code tRStoHtml_finalize
        // End of user code
    
        return s;
    }
    
    public String serviceProviderToHtml()
    {
        String s = "";
    
        // Start of user code serviceProvidertoHtml_mid
        // End of user code
    
        try {
            if ((serviceProvider == null) || (serviceProvider.getValue() == null)) {
                s = s + "<em>null</em>";
            }
            else {
                s = s + (new SP (serviceProvider.getValue())).toHtml(false);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    
        // Start of user code serviceProvidertoHtml_finalize
        // End of user code
    
        return s;
    }
    
    
}
