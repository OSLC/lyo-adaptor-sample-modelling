// Start of user code Copyright
/*******************************************************************************
 * Copyright (c) 2011, 2012 IBM Corporation and others.
 *
 *  All rights reserved. This program and the accompanying materials
 *  are made available under the terms of the Eclipse Public License v1.0
 *  and Eclipse Distribution License v. 1.0 which accompanies this distribution.
 *  
 *  The Eclipse Public License is available at http://www.eclipse.org/legal/epl-v10.html
 *  and the Eclipse Distribution License is available at
 *  http://www.eclipse.org/org/documents/edl-v10.php.
 *  
 *  Contributors:
 *  
 *	   Sam Padgett	       - initial API and implementation
 *     Michael Fiedler     - adapted for OSLC4J
 *     Jad El-khoury        - initial implementation of code generator (https://bugs.eclipse.org/bugs/show_bug.cgi?id=422448)
 *     Matthieu Helleboid   - Support for multiple Service Providers.
 *     Anass Radouani       - Support for multiple Service Providers.
 *
 * This file is generated by org.eclipse.lyo.oslc4j.codegenerator
 *******************************************************************************/
// End of user code

package com.sample.rm;


import javax.inject.Inject;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.ServletContextEvent;
import java.util.List;
import java.util.ArrayList;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.eclipse.lyo.oslc4j.core.model.ServiceProvider;
import org.eclipse.lyo.oslc4j.core.OSLC4JUtils;
import org.eclipse.lyo.oslc4j.core.model.AbstractResource;
import com.sample.rm.servlet.ServiceProviderCatalogSingleton;
import com.sample.rm.ServiceProviderInfo;
import com.sample.rm.resources.Requirement;

import org.eclipse.lyo.oslc4j.trs.server.TrsEventHandler;


// Start of user code imports
import java.util.concurrent.ThreadLocalRandom;
import java.net.URI;
import java.net.URISyntaxException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Iterator;
// End of user code

// Start of user code pre_class_code
// End of user code

public class RestDelegate {

    private static final Logger log = LoggerFactory.getLogger(RestDelegate.class);

    
    @Inject TrsEventHandler trsEventHandler;
    @Inject ResourcesFactory resourcesFactory;
    // Start of user code class_attributes
    @Inject Backend backend;
    // End of user code
    
    public RestDelegate() {
        log.trace("Delegate is initialized");
    }
    
    
    // Start of user code class_methods
    // End of user code

    //The methods contextInitializeServletListener() and contextDestroyServletListener() no longer exits
    //Migrate any user-specific code blocks to the class com.sample.rm.servlet.ServletListener
    //Any user-specific code should be found in *.lost files.

    public static ServiceProviderInfo[] getServiceProviderInfos(HttpServletRequest httpServletRequest)
    {
        ServiceProviderInfo[] serviceProviderInfos = {};
        
        // Start of user code "ServiceProviderInfo[] getServiceProviderInfos(...)"
        ServiceProviderInfo r1 = new ServiceProviderInfo();
        r1.name = "A sample RM Service Provider 1";
        r1.serviceProviderId = "1";

        ServiceProviderInfo r2 = new ServiceProviderInfo();
        r2.name = "A sample RM Service Provider 2";
        r2.serviceProviderId = "2";

        serviceProviderInfos = new ServiceProviderInfo[2];
        serviceProviderInfos[0] = r1;
        serviceProviderInfos[1] = r2;
        // End of user code
        return serviceProviderInfos;
    }

    public List<Requirement> queryRequirements(HttpServletRequest httpServletRequest, String where, String prefix, boolean paging, int page, int limit)
    {
        List<Requirement> resources = null;
        
        
        // Start of user code queryRequirements
        resources = backend.getRequirements();
        // End of user code
        return resources;
    }
    public List<Requirement> RequirementSelector(HttpServletRequest httpServletRequest, String terms)
    {
        List<Requirement> resources = null;
        
        
        // Start of user code RequirementSelector
        resources = backend.getRequirements();
        // End of user code
        return resources;
    }
    public Requirement createRequirement(HttpServletRequest httpServletRequest, final Requirement aResource)
    {
        Requirement newResource = null;
        
        
        // Start of user code createRequirement
        newResource = backend.createOrUpdateRequirement(httpServletRequest, aResource);
        trsEventHandler.onCreated(newResource);
        // End of user code
        return newResource;
    }

    public Requirement createRequirementFromDialog(HttpServletRequest httpServletRequest, final Requirement aResource)
    {
        Requirement newResource = null;
        
        
        // Start of user code createRequirementFromDialog
        newResource = backend.createOrUpdateRequirement(httpServletRequest, aResource);
        trsEventHandler.onCreated(newResource);
        // End of user code
        return newResource;
    }



    public Requirement getRequirement(HttpServletRequest httpServletRequest, final String requirementId)
    {
        Requirement aResource = null;
        
        
        // Start of user code getRequirement
        aResource = backend.getRequirement(requirementId);
        // End of user code
        return aResource;
    }

    public Boolean deleteRequirement(HttpServletRequest httpServletRequest, final String requirementId)
    {
        Boolean deleted = false;
        
        // Start of user code deleteRequirement
        // TODO Implement code to delete a resource
        // If you encounter problems, consider throwing the runtime exception WebApplicationException(message, cause, final httpStatus)
        // End of user code
        return deleted;
    }

    public Requirement updateRequirement(HttpServletRequest httpServletRequest, final Requirement aResource, final String requirementId) {
        Requirement updatedResource = null;
        
        // Start of user code updateRequirement
        updatedResource = backend.createOrUpdateRequirement(httpServletRequest, aResource);
        trsEventHandler.onModified(updatedResource);
        // End of user code
        return updatedResource;
    }

    public String getETagFromRequirement(final Requirement aResource)
    {
        String eTag = null;
        // Start of user code getETagFromRequirement
        // TODO Implement code to return an ETag for a particular resource
        // End of user code
        return eTag;
    }

}
